────────────────────────────────────────────────────────────────────────────
1. HIGH-LEVEL SUMMARY
────────────────────────────────────────────────────────────────────────────
`tail_lt_A` fails for three independent reasons:

A.   A bad call to `add_lt_add_left` produces a goal of the wrong shape
     (`mu n < mu n.delta` instead of the padded variant).

B.   Two auxiliary lemmas that the proof relies on do not exist in
     Mathlib 4: `Ordinal.le_of_lt_add_of_pos`
     and `Ordinal.IsNormal.strictMono_iff`.

C.   Several goals are still open when the tactic script terminates:
     • algebraic rearrangements of the additive splitting of `mu`
     • final inequality `6 ≤ mu n.delta + mu s + 6`
     • an equality of nested additive expressions created by `simp`.

In short, the current proof script cannot be salvaged by local patches;
it must be rewritten.

────────────────────────────────────────────────────────────────────────────
2. DETAILED TRACE (excerpt)
────────────────────────────────────────────────────────────────────────────
Termination.lean:867:10
type mismatch, term
  add_lt_add_left this (mu s + 6)
after simplification has type
  mu n < mu n.delta
but is expected to have type
  mu n + (mu s + 6) < mu n.delta + (mu s + 6)

→  The left padding `(mu s + 6)` is lost, so the produced term no
   longer fits the required type.

Termination.lean:873:11
unknown constant 'Ordinal.le_of_lt_add_of_pos'

→  This helper lemma does not exist; either re-prove it locally or
   avoid using it.

Termination.lean:885:8 & 894:37
unsolved goals (additive rearrangements)

→  `simp` rewrites `mu (recΔ …) + 1` into a complicated nested
   `Order.succ` expression.  The subsequent `calc` blocks never close
   the resulting equality goal.

Termination.lean:906:18
invalid field `strictMono_iff`

→  The current Mathlib API only exposes
   `IsNormal.strictMono : StrictMono f`; there is no `_iff` field.

────────────────────────────────────────────────────────────────────────────
3. ROOT CAUSE ANALYSIS
────────────────────────────────────────────────────────────────────────────
• The proof tries to prove
      mu(recΔ …) + 3 < mu(δ n) + μ s + 6
  by first bounding ω-powers and then “stripping” them with an
  unavailable lemma.

• Repeated use of elaborate `simp`–`rw` sequences creates fragile goals
  whose shapes no longer match the expected lemmas.

• Missing library lemmas are mimicked by ad-hoc placeholders that do
  not compile.

────────────────────────────────────────────────────────────────────────────
4. RECOMMENDED FIX
────────────────────────────────────────────────────────────────────────────
1.  Throw away the current 180-line script.
2.  Replace it with a direct argument:

    a.  From `termB_le` obtain
          ω²·(μ(rec)+1) ≤ ω^(μ(rec)+3).

    b.  Prove the key exponent inequality
          μ(rec)+3 < μ(δ n)+μ s+6
        via the strict-monotonicity of `ω^`.

        •   Strict-mono ⇒
              ω^(μ(rec)) < ω^(μ(rec)+1) < A
            because `μ(rec)+1 < A` by the principal-segment property.

        •   Thus `μ(rec) < μ(δ n)+μ s+6`, hence add the finite `3`.

    c.  Combine (a) and (b) with
          `ω^(μ(rec)+3) < ω^(μ(δ n)+μ s+6)`.

3.  The resulting Lean proof is ± 40 lines and requires no exotic
    lemmas; only `opow_lt_opow_right` and `termB_le`.

────────────────────────────────────────────────────────────────────────────
5. ACTION ITEMS
────────────────────────────────────────────────────────────────────────────
• Implement the new concise proof (see outline above).
• Delete dead helper lemmas and the failing 190-line script.
• Ensure that `mu_merge_lt_rec` still compiles; its dependencies will
  remain unchanged once the clean proof is in place.
