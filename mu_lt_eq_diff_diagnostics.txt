Termination.lean:147:8
Expected type
⊢ ∀ (a b : Trace), mu (a.merge b).integrate < mu (a.eqW b)
Messages (2)
Termination.lean:146:0
[diag] Diagnostics ▼
  [kernel] unfolded declarations (max: 608, num: 1): ▼
    [] Quotient.lift ↦ 608 
use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
Termination.lean:146:0
[diag] Diagnostics ▼
  [reduction] unfolded declarations (max: 1864, num: 11): ▼
    [] Add.add ↦ 1864 
    [] HAdd.hAdd ↦ 1655 
    [] WellOrder.rec ↦ 1324 
    [] Pow.pow ↦ 1093 
    [] Mul.mul ↦ 1027 
    [] HPow.hPow ↦ 1014 
    [] HMul.hMul ↦ 931 
    [] Quotient ↦ 889 
    [] ite ↦ 877 
    [] Ordinal ↦ 764 
    [] Quotient.mk ↦ 678 
  [reduction] unfolded instances (max: 1199, num: 1): ▶
  [reduction] unfolded reducible declarations (max: 2919, num: 7): ▼
    [] Quotient.lift ↦ 2919 
    [] Quotient.liftOn₂ ↦ 2424 
    [] Quotient.lift₂ ↦ 2424 
    [] outParam ↦ 1572 
    [] WellOrder.casesOn ↦ 1324 
    [] Decidable.casesOn ↦ 987 
    [] casesOn ↦ 852 
  [def_eq] heuristic for solving `f a =?= f b` (max: 664, num: 1): ▼
    [] instHAdd ↦ 664 
  [kernel] unfolded declarations (max: 608, num: 1): ▼
    [] Quotient.lift ↦ 608 
use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
All Messages (19)
Termination.lean:42:0
[diag] Diagnostics ▼
  [reduction] unfolded reducible declarations (max: 643, num: 1): ▼
    [] outParam ↦ 643 
use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
Termination.lean:179:49
unsolved goals
a : Trace
h_omega2 : ω ≤ ω ^ 2
ha : a = void
s : Trace
h_both : ¬(a = void ∧ s.delta = void)
C : Ordinal.{0} := mu a + mu s.delta
hC : C = mu a + mu s.delta
hb : s.delta ≠ void
h_bound : ω ^ 2 < ω ^ 5
h_le : ω ^ 2 ≤ ω ^ 5
h_mu_def : mu s.delta = ω ^ 5 * (mu s + 1) + 1
⊢ 1 ≤ Order.succ (mu s)
Termination.lean:181:21
unknown constant 'Ordinal.mul_one'
Termination.lean:193:49
unsolved goals
a : Trace
h_omega2 : ω ≤ ω ^ 2
ha : a = void
s : Trace
h_both : ¬(a = void ∧ s.integrate = void)
C : Ordinal.{0} := mu a + mu s.integrate
hC : C = mu a + mu s.integrate
hb : s.integrate ≠ void
h_bound : ω ^ 2 < ω ^ 4
h_le : ω ^ 2 ≤ ω ^ 4
h_mu_def : mu s.integrate = ω ^ 4 * (mu s + 1) + 1
⊢ 1 ≤ Order.succ (mu s)
Termination.lean:195:21
unknown constant 'Ordinal.mul_one'
Termination.lean:207:49
unsolved goals
a : Trace
h_omega2 : ω ≤ ω ^ 2
ha : a = void
c d : Trace
h_both : ¬(a = void ∧ c.merge d = void)
C : Ordinal.{0} := mu a + mu (c.merge d)
hC : C = mu a + mu (c.merge d)
hb : c.merge d ≠ void
h_bound : ω ^ 2 < ω ^ 3
h_le : ω ^ 2 ≤ ω ^ 3
h_mu_def : mu (c.merge d) = ω ^ 3 * (mu c + 1) + ω ^ 2 * (mu d + 1) + 1
⊢ 1 ≤ Order.succ (mu c)
Termination.lean:209:21
unknown constant 'Ordinal.mul_one'
Termination.lean:211:34
Application type mismatch: In the application
  le_trans this (Ordinal.le_add_right ?m.18988 ?m.18989)
the argument
  Ordinal.le_add_right ?m.18988 ?m.18989
has type
  ?m.18988 ≤ ?m.18988 + ?m.18989 : Prop
but is expected to have type
  ω ^ 3 * (mu c + 1) ≤ ω ^ 3 * (mu c + 1) + ω ^ 2 * (mu d + 1) + 1 : Prop
Termination.lean:224:34
Application type mismatch: In the application
  le_trans this (Ordinal.le_add_right ?m.28807 ?m.28808)
the argument
  Ordinal.le_add_right ?m.28807 ?m.28808
has type
  ?m.28807 ≤ ?m.28807 + ?m.28808 : Prop
but is expected to have type
  ω ^ (mu n' + mu s' + 6) ≤ ω ^ (mu n' + mu s' + 6) + ω * (mu b' + 1) + 1 : Prop
Termination.lean:244:78
This simp argument is unused:
  Ordinal.le_add_left

Hint: Omit it from the simp argument list.
  simp [Ordinal.le_add_left]

Note: This linter can be disabled with `set_option linter.unusedSimpArgs false`
Termination.lean:246:45
unsolved goals
a b : Trace
h_both : ¬(a = void ∧ b = void)
C : Ordinal.{0} := mu a + mu b
hC : C = mu a + mu b
h_omega2 : ω ≤ ω ^ 2
ha : ¬a = void
⊢ ω ^ 2 + ω ^ 2 = ω ^ 3 + ω ^ 2
Termination.lean:249:59
type mismatch
  Ordinal.le_add_right ?m.43696 ?m.43697
has type
  ?m.43696 ≤ ?m.43696 + ?m.43697 : Prop
but is expected to have type
  ω ^ 3 + ω ^ 2 ≤ ω ^ 5 * Order.succ (mu s) : Prop
Termination.lean:250:63
type mismatch
  Ordinal.le_add_right ?m.53933 ?m.53934
has type
  ?m.53933 ≤ ?m.53933 + ?m.53934 : Prop
but is expected to have type
  ω ^ 3 + ω ^ 2 ≤ ω ^ 4 * Order.succ (mu s) : Prop
Termination.lean:251:61
type mismatch
  Ordinal.le_add_right ?m.64391 ?m.64392
has type
  ?m.64391 ≤ ?m.64391 + ?m.64392 : Prop
but is expected to have type
  ω ^ 3 + ω ^ 2 ≤ ω ^ 3 * Order.succ (mu c) + ω ^ 2 * Order.succ (mu d) : Prop
Termination.lean:252:62
type mismatch
  Ordinal.le_add_right ?m.72858 ?m.72859
has type
  ?m.72858 ≤ ?m.72858 + ?m.72859 : Prop
but is expected to have type
  ω ^ 3 + ω ^ 2 ≤ ω ^ (mu a✝ + mu a✝¹ + 6) + ω * Order.succ (mu a✝²) : Prop
Termination.lean:253:59
type mismatch
  Ordinal.le_add_right ?m.76900 ?m.76901
has type
  ?m.76900 ≤ ?m.76900 + ?m.76901 : Prop
but is expected to have type
  ω ^ 3 + ω ^ 2 ≤ ω ^ (mu a✝¹ + mu a✝ + 9) : Prop
Termination.lean:146:0
[diag] Diagnostics ▼
  [kernel] unfolded declarations (max: 608, num: 1): ▼
    [] Quotient.lift ↦ 608 
use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
Termination.lean:146:0
[diag] Diagnostics ▼
  [reduction] unfolded declarations (max: 1864, num: 11): ▼
    [] Add.add ↦ 1864 
    [] HAdd.hAdd ↦ 1655 
    [] WellOrder.rec ↦ 1324 
    [] Pow.pow ↦ 1093 
    [] Mul.mul ↦ 1027 
    [] HPow.hPow ↦ 1014 
    [] HMul.hMul ↦ 931 
    [] Quotient ↦ 889 
    [] ite ↦ 877 
    [] Ordinal ↦ 764 
    [] Quotient.mk ↦ 678 
  [reduction] unfolded instances (max: 1199, num: 1): ▼
    [] instHAdd ↦ 1199 
  [reduction] unfolded reducible declarations (max: 2919, num: 7): ▼
    [] Quotient.lift ↦ 2919 
    [] Quotient.liftOn₂ ↦ 2424 
    [] Quotient.lift₂ ↦ 2424 
    [] outParam ↦ 1572 
    [] WellOrder.casesOn ↦ 1324 
    [] Decidable.casesOn ↦ 987 
    [] casesOn ↦ 852 
  [def_eq] heuristic for solving `f a =?= f b` (max: 664, num: 1): ▼
    [] instHAdd ↦ 664 
  [kernel] unfolded declarations (max: 608, num: 1): ▼
    [] Quotient.lift ↦ 608 
use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
Termination.lean:297:8
declaration uses 'sorry'